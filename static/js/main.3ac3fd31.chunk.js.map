{"version":3,"sources":["ListItem.js","BucketName.js","TodoList.js","BucketManager.js","Root.js","reducer.js","serviceWorker.js","index.js"],"names":["ListItem","props","state","isCompleted","changeState","bind","this","itemState","event","newState","dispatch","itemName","className","type","key","checked","onChange","returnClass","React","Component","connect","activeBucket","activeBucketName","BucketName","bucketName","handleChange","handleEnter","clickHandler","setState","target","value","keyCode","name","isEditable","placeholder","onKeyDown","renderField","TodoList","newItem","handleNewItem","handleBack","renderItems","selectedBucket","listState","filter","bucket","items","console","log","length","map","item","history","push","onClick","bucketList","withRouter","BucketManager","renderBucketList","addBucket","showBucket","pathname","todoItems","list","Root","path","initialState","reducer","action","itemToAdd","Object","assign","i","JSON","parse","stringify","j","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ac3fd31.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport './ListItem.css';\n\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCompleted: 0\n    }\n    this.changeState = this.changeState.bind(this);\n  }\n  returnClass() {\n    return (this.props.itemState) ? 'completedText' : 'activeText';\n  }\n  changeState(event) {\n    var newState = this.props.itemState ? 0 : 1;\n    this.props.dispatch({\n      'type': 'CHANGE_ITEM_STATE',\n      'itemName': this.props.itemName,\n      'newState': newState\n    });\n    //this.setState({ isCompleted: newState });\n  }\n  render() {\n    return (\n      <div className='listItem'>\n        <input type='checkbox' key={this.props.itemName} checked={this.props.itemState} onChange={this.changeState} />\n        <p className={this.returnClass()}> {this.props.itemName} </p>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    activeBucket: state.activeBucketName\n  }\n}\n\nexport default connect(mapStateToProps)(ListItem);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport './BucketName.css'\n\nclass BucketName extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      bucketName: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ bucketName: event.target.value });\n  }\n  handleEnter(event) {\n    if (event.keyCode === 13) {\n      if (this.state.bucketName != '') {\n        this.props.dispatch({\n          'type': 'ADD_NEW_BUCKET',\n          'name': this.state.bucketName\n        })\n        this.props.dispatch({\n          type: 'CHANGE_ACTIVE_BUCKET',\n          name: this.state.bucketName\n        })\n      }\n    }\n  }\n  clickHandler() {\n    this.setState({ isEditable: 1 });\n  }\n  renderField() {\n    if (!this.props.name) {\n      return (\n        <input\n          type='input'\n          placeholder='Add name and hit ENTER'\n          className='nameInput'\n          onChange={this.handleChange}\n          onKeyDown={this.handleEnter}\n          value={this.state.bucketName}\n        />\n      )\n    }\n    else return (\n      <div className='editedName'>\n        <h1> {this.props.name} </h1>\n      </div>\n    )\n  }\n  render() {\n    return (\n      <div>\n        {this.renderField()}\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n\n  }\n}\n\nexport default connect(mapStateToProps)(BucketName);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ListItem from './ListItem';\nimport BucketName from './BucketName';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport './TodoList.css'\n\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newItem: ''\n    }\n    this.handleNewItem = this.handleNewItem.bind(this);\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleBack = this.handleBack.bind(this);\n    this.renderItems = this.renderItems.bind(this);\n  }\n  renderItems() {\n    const bucketName = this.props.activeBucket;\n    if (bucketName != '') {\n      var selectedBucket = this.props.listState.filter(function (bucket) {\n        return bucketName === bucket.name\n      });\n      var items = selectedBucket[0].items;\n      console.log(selectedBucket[0]);\n      if (items.length == 0) return <p className='emptyText'> Humpty Dumpty - Todo list is empty </p>\n      else {\n        return items.map((item) =>\n          <ListItem\n            key={item.itemName}\n            itemName={item.itemName}\n            itemState={item.isCompleted} />);\n      }\n    }\n    else {\n      return <p className='emptyText'> Create the bucket first before adding the list </p>\n    }\n  }\n\n  handleNewItem(event) {\n    this.setState({ newItem: event.target.value });\n  }\n  handleEnter(event) {\n    if (event.keyCode === 13) {\n      // var item = [];\n      // item.push(this.state.newItem);\n      // this.setState({items: item.concat(this.state.items)});\n      this.props.dispatch({\n        type: 'ADD_ITEM',\n        itemName: this.state.newItem,\n        bucketName: this.props.activeBucket\n      })\n      this.setState({ newItem: '' });\n    }\n  }\n  handleBack() {\n    this.props.history.push('/');\n  }\n  render() {\n    const name = this.props.activeBucket;\n    return (\n      <div className='todoList'>\n        <div className='bucketName'>\n          <BucketName name={name} />\n        </div>\n        <div className='listControl'>\n          <input\n            type='input'\n            placeholder='Enter an item name and press enter to add'\n            className='styledInput'\n            value={this.state.newItem}\n            onChange={this.handleNewItem}\n            onKeyDown={this.handleEnter}\n          />\n          <div className='listItems'>\n            {this.renderItems()}\n          </div>\n        </div>\n        <div onClick={this.handleBack}>\n          <p className='backLink'> Back to list  </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    listState: state.bucketList,\n    activeBucket: state.activeBucketName\n  }\n}\n\nexport default connect(mapStateToProps)(withRouter(TodoList));\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport './BucketManager.css'\n\n\nclass BucketManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderBucketList = this.renderBucketList.bind(this);\n    this.addBucket = this.addBucket.bind(this);\n    this.showBucket = this.showBucket.bind(this);\n  }\n  showBucket(bucket) {\n    this.props.dispatch({\n      'type': 'CHANGE_ACTIVE_BUCKET',\n      'name': bucket.name\n    });\n    this.props.history.push({\n      pathname: '/list',\n      state: {\n        bucketName: bucket.name,\n        todoItems: bucket.items\n      }\n    });\n  }\n  renderBucketList() {\n    return this.props.list.map((bucket) => {\n      return (\n        <div key={bucket.name} className='bucketBox' onClick={() => this.showBucket(bucket)}>\n          <p className='bucketText'>{bucket.name}</p>;\n        </div>\n      )\n    });\n  }\n  addBucket() {\n    console.log('Add a bucket')\n    this.props.dispatch({\n      type: 'CHANGE_ACTIVE_BUCKET',\n      name: ''\n    })\n    this.props.history.push('/list');\n  }\n  render() {\n    return (\n      <div className='bucketManager'>\n        <h1> List of buckets </h1>\n        <div className='boxList'>\n          {this.renderBucketList()}\n        </div>\n        <input\n          type='button'\n          value='Add new bucket'\n          className='addBucket'\n          onClick={this.addBucket}\n        />\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    list: state.bucketList\n  }\n}\n\nexport default connect(mapStateToProps)(withRouter(BucketManager));\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\n\nimport TodoList from './TodoList';\nimport BucketManager from './BucketManager';\nimport './Root.css'\n\nclass Root extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path='/list'>\n            <TodoList />\n          </Route>\n          <Route path='/'>\n            <BucketManager />\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default Root;\n","const initialState = {\n  bucketList: [\n    {\n      \"name\": \"Bali\",\n      \"items\": [\n        {\n          \"itemName\": \"Ubud\",\n          \"isCompleted\": 0\n        },\n        {\n          \"itemName\": \"Uluwatu\",\n          \"isCompleted\": 1\n        },\n        {\n          \"itemName\": \"Kuta\",\n          \"isCompleted\": 1\n        }\n      ]\n    },\n    {\n      \"name\": \"Jaipur\",\n      \"items\": [\n        {\n          \"itemName\": \"Hawa Mahal\",\n          \"isCompleted\": 1\n        },\n        {\n          \"itemName\": \"Jantar Mantar\",\n          \"isCompleted\": 0\n        },\n        {\n          \"itemName\": \"Jal Mahal\",\n          \"isCompleted\": 0\n        }\n      ]\n    }\n  ],\n  activeBucketName: ''\n}\n\nconst reducer = function (state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      console.log('Attempting to insert ' + action.itemName + ' to ' + action.bucketName);\n      var itemToAdd = {\n        \"itemName\": action.itemName,\n        \"isCompleted\": 0\n      }\n      var newState = Object.assign({}, state);\n      for (var i = 0; i < newState.bucketList.length; i++) {\n        if (newState.bucketList[i].name == action.bucketName) {\n          newState.bucketList[i].items.push(itemToAdd);\n          break;\n        }\n      }\n      return newState;\n\n    case 'CHANGE_ITEM_STATE':\n      console.log('Attempting to change item state');\n      var newState = JSON.parse(JSON.stringify(state));\n      for (var i = 0; i < newState.bucketList.length; i++) {\n        if (newState.bucketList[i].name == state.activeBucketName) {\n          for (var j = 0; j < newState.bucketList[i].items.length; j++) {\n            if (newState.bucketList[i].items[j].itemName == action.itemName) {\n              console.log('Item found' + newState.bucketList[i].items[j].itemName);\n              newState.bucketList[i].items[j].isCompleted = action.newState;\n              break;\n            }\n          }\n        }\n      }\n      return newState;\n\n    case 'CHANGE_ACTIVE_BUCKET':\n      console.log('Request to change active bucket to ' + action.name);\n      return { ...state, activeBucketName: action.name };\n\n    case 'ADD_NEW_BUCKET':\n      console.log('Adding new bucket: ' + action.name);\n      var newState = Object.assign({}, state);\n      var itemToAdd = {\n        \"name\": action.name,\n        \"items\": []\n      }\n      newState.bucketList.push(itemToAdd);\n      return newState;\n\n    default:\n      return state;\n  }\n}\n\n\nexport default reducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './Root'\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store}><Root /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}